import "std.ub";
import "fs.ub";

// constants for image size and color depth
macro WIDTH 15;
macro HEIGHT 15;
macro MAX_C 255;

fun sys_write_num(fd: u64, num: u64): void {
    let BUFFER_SIZE: u64 = 128;

    let begin_ptr: char *mut = malloc(BUFFER_SIZE) as char *mut;
    let buf_end: char *mut = begin_ptr + BUFFER_SIZE;

    let size: u64 = itoa(num, 10, buf_end);

    sys_write(fd, (buf_end - size) as char *, size);

    free(begin_ptr as void *mut);

    return;
};

fun main(argc: u64, args: char *): u64 {
    // open file for writing
    let fd: u64 = sys_open("file.ppm" as char *, 0 | O_WRONLY | O_APPEND, 0);

    // handle file open error
    if fd < 0 {
        print_strl("Failed to open file!\n");
        return 1;
    };

    print_strl("Successfully opened file!\n");

    // write header
    sys_write(fd, "P3\n" as char *, 3);
    sys_write(fd, "15" as char *, 2);
    sys_write(fd, " " as char *, 1);
    sys_write(fd, "15" as char *, 2);
    sys_write(fd, "\n" as char *, 1);
    sys_write(fd, "255" as char *, 3);
    sys_write(fd, "\n" as char *, 1);

    // write image data
    for let mut i: u64 = 0; i < WIDTH; i += 1 {
        for let mut j: u64 = 0; j < HEIGHT; j += 1 {
            let c: char * = "255 0 0 " as char *;
            sys_write(fd, c, cstrlen(c));
        };
        sys_write(fd, "\n" as char *, 1);
    };

    // close file
    sys_close(fd);

    return 0;
};