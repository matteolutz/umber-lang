import "std.ub";

// constant
macro BUF_CAP 4096;

fun main(argc: u64, args: char *): u64 {

    // check if args are valid
	if argc < 2 {
		print_strl("Usage: cat <path to file> [Max buffer capacity (default: 4096)]\n");
		return 1;
	};

    // get args array and retrieve individual vars
	let args_arr: char **mut = get_args_arr(argc, args);
	let filename: char * = *args_arr[1];
	let mut buf_cap: u64 = BUF_CAP;

	if argc > 2 {
		buf_cap = atoi(*args_arr[2]);
	};

    // open the file for reading
	let fd: u64 = sys_open(filename, 0 | O_RDONLY, 0);
	if fd >= 0 {
	    // create a string buffer
	    let buf: char *mut = malloc(buf_cap) as char *mut;

	    // read the file into the buffer and save the number of bytes read
		let actual_size: u64 = sys_read(fd, buf, buf_cap);

		// print the buffer
		print_char_ptr(buf as char *, actual_size);
		print_strl("\n");

		// free the buffer
		free(buf as void *mut);
	} else {
		print_strl("Failed to open file!\n");
	};

    // close the file
	sys_close(fd);

	// free the arguments array
	free(args_arr as void *mut);

	return 0;
};